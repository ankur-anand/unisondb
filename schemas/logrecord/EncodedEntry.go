// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package logrecord

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EncodedEntry struct {
	_tab flatbuffers.Table
}

func GetRootAsEncodedEntry(buf []byte, offset flatbuffers.UOffsetT) *EncodedEntry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EncodedEntry{}
	x.Init(buf, n+offset)
	return x
}

func FinishEncodedEntryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEncodedEntry(buf []byte, offset flatbuffers.UOffsetT) *EncodedEntry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EncodedEntry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEncodedEntryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EncodedEntry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EncodedEntry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EncodedEntry) Entry(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *EncodedEntry) EntryLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EncodedEntry) EntryBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EncodedEntry) MutateEntry(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func EncodedEntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func EncodedEntryAddEntry(builder *flatbuffers.Builder, entry flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(entry), 0)
}
func EncodedEntryStartEntryVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func EncodedEntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
