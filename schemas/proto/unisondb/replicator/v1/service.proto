syntax = "proto3";
package kvalchemy.replicator.v1;

option go_package = "github.com/ankur-anand/unisondb/schemas/proto/gen/go/unisondb/replicator/v1";

import "google/protobuf/timestamp.proto";

service KVStoreWriteService {
  rpc Put(PutRequest) returns (PutResponse);
  rpc PutStream(stream PutStreamRequest) returns (PutStreamResponse);
  // PutStreamChunksForKey: starts a stream can be used to put a large value associated
  // with the key.
  // value needs to be chunked into smaller size for efficient transmission and storage over grpc.
  // STEPS:
  // 1. Send the Chunk Start Marker.
  // 2. Stream the Chunk Values.
  // 3. Send the Chunk Commit Marker.
  // It's important to send Chunk Commit Marker else the chunked value will not be visible to reader.
  rpc PutStreamChunksForKey(stream PutStreamChunksForKeyRequest) returns (PutStreamChunksForKeyResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc DeleteStream(stream DeleteStreamRequest) returns (DeleteStreamResponse);
}

message PutRequest {
  bytes key = 1;
  bytes value = 2;
  google.protobuf.Timestamp timestamp = 4;
  fixed32 crc32_checksum = 3;
}

message PutStreamRequest {
  repeated PutRequest kv_pairs = 1;
}

message PutResponse {}

message PutStreamResponse {}

message DeleteRequest {
  bytes key = 1;
}

message DeleteResponse {}

message DeleteStreamRequest {
  repeated DeleteRequest deletes = 1; // List of keys to delete
}

message DeleteStreamResponse {}

message PutStreamChunksForKeyRequest {
  oneof request_type  {
    ChunkStartMarker start_marker = 1;
    ChunkCommitMarker commit_marker = 2;
    ChunkPutValue chunk = 3;
  }
}

message ChunkStartMarker {
  bytes key = 1;
}

message ChunkPutValue {
  bytes value = 1;
  fixed32 crc32_checksum = 2;
}

message ChunkCommitMarker {
  fixed32 final_crc32_checksum = 1;
}

message PutStreamChunksForKeyResponse {}

service KVStoreReadService {
  rpc Get(GetRequest) returns (stream GetResponse);
}

message GetRequest {
  bytes key = 1;
}

message GetResponse {
  bytes data = 1;
  bool chunked = 2;
  fixed32 final_crc32_checksum = 3;
}